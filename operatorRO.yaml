apiVersion: v1
kind: ServiceAccount
metadata:
  name: operator-sa
  namespace: argocd
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: application-topic-operator
  namespace: argocd
  labels:
    app: application-topic-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: application-topic-operator
  template:
    metadata:
      labels:
        app: application-topic-operator
    spec:
      serviceAccountName: operator-sa
      containers:
        - name: operator
          image: python:3.9-slim  # Use a Python container image for simplicity
          command: ["python", "/operator/operator.py"]  # This assumes the operator script is mounted in the container
          volumeMounts:
            - name: operator-script
              mountPath: /operator
              subPath: operator.py
      volumes:
        - name: operator-script
          configMap:
            name: operator-script
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: operator-script
  namespace: argocd
data:
  operator.py: |
    # Paste the entire operator.py content here
    import kopf
    import logging

    # Set up logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    @kopf.on.create('jones.com', 'v1', 'applicationtopics')
    def create_topic(spec, name, namespace, logger, **kwargs):
        # Extract necessary fields from the spec
        topic_name = spec['name']
        config = spec.get('config', {})
        consumers = spec.get('consumers', [])
        partitions = spec.get('partitions', 1)
        replication_factor = config.get('replicationFactor', 1)
        retention_ms = config.get('retentionMs', 16800000)  # Default to 7 days in ms
        cleanup_policy = config.get('cleanupPolicy', 'delete')  # Default to 'delete'

        # Log information about the topic to be created
        logger.info(f"Creating topic '{topic_name}' in namespace '{namespace}'")
        logger.info(f"Partitions: {partitions}, Replication Factor: {replication_factor}, Retention: {retention_ms}, Cleanup Policy: {cleanup_policy}")
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: argocd
  name: operator-role
rules:
  - apiGroups: [""]
    resources: ["pods", "services"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["jones.com"]
    resources: ["applicationtopics"]
    verbs: ["create", "get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: operator-rolebinding
  namespace: argocd
subjects:
  - kind: ServiceAccount
    name: operator-sa
    namespace: argocd
roleRef:
  kind: Role
  name: operator-role
  apiGroup: rbac.authorization.k8s.io

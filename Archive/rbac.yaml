---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka-topic-operator-sa
  namespace: argocd # Uncomment and set if deploying operator to a specific namespace
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole # Use Role if operator and CRs are restricted to ONE namespace
metadata:
  name: kafka-topic-operator-role
rules:
  # Permissions for the CRD itself (adjust group/resource name if needed)
  - apiGroups: ["jones.com"]
    resources: ["applicationtopics"]
    verbs: ["get", "list", "watch", "patch", "update"] # Patch/update needed for status
  - apiGroups: ["jones.com"]
    resources: ["applicationtopics/status"] # Explicit permission for status subresource
    verbs: ["get", "patch", "update"]
  # Permission to read the Confluent credentials secret
  - apiGroups: [""] # Core API group
    resources: ["secrets"]
    verbs: ["get", "list", "watch"] # Operator only needs to READ the secret
  # Permission for Kopf to create events associated with the CRs
  - apiGroups: [""] # Core API group
    resources: ["events"]
    verbs: ["create", "patch"]
  # Optional: Permissions needed if Kopf's peering/leader election is used (not needed with --standalone)
  # - apiGroups: ["kopf.dev"]
  #   resources: ["clusterkopfpeerings", "kopfpeerings"]
  #   verbs: ["list", "watch", "patch", "get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding # Use RoleBinding if using Role above
metadata:
  name: kafka-topic-operator-binding
subjects:
  - kind: ServiceAccount
    name: kafka-topic-operator-sa
    namespace: default # Change to your-operator-namespace if specified above
roleRef:
  kind: ClusterRole # Match kind used above (Role or ClusterRole)
  name: kafka-topic-operator-role
  apiGroup: rbac.authorization.k8s.io